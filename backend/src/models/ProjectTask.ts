import mongoose, { Schema } from 'mongoose';
import { IBaseTask, TaskType } from './BaseTask';

// ---------- PROJECT TASK INTERFACE ----------
export interface IProjectTask extends IBaseTask {
  // Project-specific fields
  projectName: string;
  projectPhase: 'planning' | 'development' | 'testing' | 'deployment' | 'maintenance' | 'completed';
  projectType: 'web_app' | 'mobile_app' | 'desktop_app' | 'api' | 'database' | 'infrastructure' | 'research' | 'other';
  teamMembers: mongoose.Types.ObjectId[];
  projectManager?: mongoose.Types.ObjectId;
  budget?: number;
  actualCost?: number;
  technologies: string[]; // Tech stack
  projectGoals: string[];
  deliverables: string[];
  milestones: {
    name: string;
    dueDate: Date;
    completed: boolean;
    completedAt?: Date;
  }[];
  projectStatus: 'on_track' | 'at_risk' | 'delayed' | 'cancelled';
  riskFactors?: string[];
  dependencies?: mongoose.Types.ObjectId[]; // Other project dependencies
  clientName?: string;
  clientContact?: string;
}

// ---------- PROJECT TASK SCHEMA ----------
const ProjectTaskSchema = new Schema({
  // Base task fields
  title: {
    type: String,
    required: [true, 'Please add a task title'],
    trim: true,
    maxlength: [200, 'Title cannot be more than 200 characters']
  },
  description: {
    type: String,
    trim: true,
    maxlength: [1000, 'Description cannot be more than 1000 characters']
  },
  taskType: {
    type: String,
    enum: Object.values(TaskType),
    required: [true, 'Please specify task type'],
    default: TaskType.PROJECT
  },
  priority: {
    type: String,
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium'
  },
  status: {
    type: String,
    enum: ['pending', 'in_progress', 'completed', 'cancelled'],
    default: 'pending'
  },
  dueDate: { type: Date },
  startDate: { type: Date },
  completedAt: { type: Date },
  estimatedDuration: {
    type: Number,
    min: [1, 'Duration must be at least 1 minute']
  },
  actualDuration: {
    type: Number,
    min: [1, 'Duration must be at least 1 minute']
  },
  tags: [{
    type: String,
    trim: true,
    maxlength: [50, 'Tag cannot be more than 50 characters']
  }],
  assignee: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  assignedBy: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  collaborators: [{
    type: Schema.Types.ObjectId,
    ref: 'User'
  }],
  location: {
    type: String,
    trim: true,
    maxlength: [200, 'Location cannot be more than 200 characters']
  },
  isRecurring: {
    type: Boolean,
    default: false
  },
  recurringPattern: {
    frequency: {
      type: String,
      enum: ['daily', 'weekly', 'monthly', 'yearly']
    },
    interval: {
      type: Number,
      min: [1, 'Interval must be at least 1']
    },
    daysOfWeek: [{
      type: Number,
      min: 0,
      max: 6
    }],
    dayOfMonth: {
      type: Number,
      min: 1,
      max: 31
    },
    endDate: {
      type: Date
    }
  },
  parentTask: {
    type: Schema.Types.ObjectId,
    ref: 'ProjectTask'
  },
  subtasks: [{
    type: Schema.Types.ObjectId,
    ref: 'ProjectTask'
  }],
  attachments: [{
    filename: {
      type: String,
      required: true
    },
    url: {
      type: String,
      required: true
    },
    uploadedAt: {
      type: Date,
      default: Date.now
    }
  }],
  notes: [{
    content: {
      type: String,
      required: true,
      maxlength: [500, 'Note cannot be more than 500 characters']
    },
    createdAt: {
      type: Date,
      default: Date.now
    },
    createdBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true
    }
  }],
  reminders: [{
    date: {
      type: Date,
      required: true
    },
    message: {
      type: String,
      maxlength: [200, 'Reminder message cannot be more than 200 characters']
    },
    isSent: {
      type: Boolean,
      default: false
    }
  }],
  xpValue: {
    type: Number,
    default: 10,
    min: [0, 'XP value cannot be negative']
  },
  autoGenerated: {
    type: Boolean,
    default: false
  },
  
  // Project-specific fields
  projectName: {
    type: String,
    required: [true, 'Please specify the project name'],
    trim: true,
    maxlength: [100, 'Project name cannot be more than 100 characters']
  },
  projectPhase: {
    type: String,
    enum: ['planning', 'development', 'testing', 'deployment', 'maintenance', 'completed'],
    required: [true, 'Please specify the project phase'],
    default: 'planning'
  },
  projectType: {
    type: String,
    enum: ['web_app', 'mobile_app', 'desktop_app', 'api', 'database', 'infrastructure', 'research', 'other'],
    required: [true, 'Please specify the project type'],
    default: 'other'
  },
  teamMembers: [{
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }],
  projectManager: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  budget: {
    type: Number,
    min: [0, 'Budget cannot be negative']
  },
  actualCost: {
    type: Number,
    min: [0, 'Actual cost cannot be negative']
  },
  technologies: [{
    type: String,
    trim: true,
    maxlength: [50, 'Technology name cannot be more than 50 characters']
  }],
  projectGoals: [{
    type: String,
    trim: true,
    maxlength: [200, 'Project goal cannot be more than 200 characters']
  }],
  deliverables: [{
    type: String,
    trim: true,
    maxlength: [200, 'Deliverable cannot be more than 200 characters']
  }],
  milestones: [{
    name: {
      type: String,
      required: true,
      trim: true,
      maxlength: [100, 'Milestone name cannot be more than 100 characters']
    },
    dueDate: {
      type: Date,
      required: true
    },
    completed: {
      type: Boolean,
      default: false
    },
    completedAt: {
      type: Date
    }
  }],
  projectStatus: {
    type: String,
    enum: ['on_track', 'at_risk', 'delayed', 'cancelled'],
    default: 'on_track'
  },
  riskFactors: [{
    type: String,
    trim: true,
    maxlength: [200, 'Risk factor cannot be more than 200 characters']
  }],
  dependencies: [{
    type: Schema.Types.ObjectId,
    ref: 'ProjectTask'
  }],
  clientName: {
    type: String,
    trim: true,
    maxlength: [100, 'Client name cannot be more than 100 characters']
  },
  clientContact: {
    type: String,
    trim: true,
    maxlength: [200, 'Client contact cannot be more than 200 characters']
  }
}, {
  timestamps: true
});

// Set default taskType
ProjectTaskSchema.add({ taskType: { type: String, default: TaskType.PROJECT } });

// Project-specific indexes
ProjectTaskSchema.index({ assignee: 1, projectPhase: 1 });
ProjectTaskSchema.index({ teamMembers: 1 });
ProjectTaskSchema.index({ projectStatus: 1 });
ProjectTaskSchema.index({ projectType: 1 });

// Virtual for calculating project progress
ProjectTaskSchema.virtual('projectProgress').get(function() {
  if (!this['milestones'] || !this['milestones'].length) return 0;
  const completedMilestones = this['milestones'].filter((m: any) => m.completed).length;
  return (completedMilestones / this['milestones'].length) * 100;
});

// Virtual for checking if project is over budget
ProjectTaskSchema.virtual('isOverBudget').get(function() {
  return this['budget'] && this['actualCost'] && this['actualCost'] > this['budget'];
});

// Method to add team member
ProjectTaskSchema.methods['addTeamMember'] = function(userId: string) {
  if (!this['teamMembers'].includes(userId)) {
    this['teamMembers'].push(userId);
  }
  return this['save']();
};

// Method to add milestone
ProjectTaskSchema.methods['addMilestone'] = function(name: string, dueDate: Date) {
  this['milestones'].push({
    name,
    dueDate,
    completed: false
  });
  return this['save']();
};

// Method to complete milestone
ProjectTaskSchema.methods['completeMilestone'] = function(milestoneIndex: number) {
  if (this['milestones'][milestoneIndex]) {
    this['milestones'][milestoneIndex].completed = true;
    this['milestones'][milestoneIndex].completedAt = new Date();
  }
  return this['save']();
};

const ProjectTask = mongoose.model<IProjectTask>('ProjectTask', ProjectTaskSchema);
export default ProjectTask;
