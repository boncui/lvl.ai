import mongoose, { Schema } from 'mongoose';
import { IBaseTask, TaskType } from './BaseTask';

// ---------- HOMEWORK TASK INTERFACE ----------
export interface IHomeworkTask extends IBaseTask {
  // Homework-specific fields
  subject: string;
  assignmentType: 'essay' | 'problem_set' | 'project' | 'reading' | 'quiz' | 'exam' | 'other';
  difficulty: 'easy' | 'medium' | 'hard';
  estimatedStudyTime?: number; // in minutes
  actualStudyTime?: number; // in minutes
  grade?: string; // A, B, C, D, F, or percentage
  dueDate: Date; // Required for homework
  materials?: string[]; // Required materials/books
  studyNotes?: string; // Study notes (renamed to avoid conflict with base notes)
  isGroupWork: boolean;
  groupMembers?: mongoose.Types.ObjectId[];
}

// ---------- HOMEWORK TASK SCHEMA ----------
const HomeworkTaskSchema = new Schema({
  // Base task fields
  title: {
    type: String,
    required: [true, 'Please add a task title'],
    trim: true,
    maxlength: [200, 'Title cannot be more than 200 characters']
  },
  description: {
    type: String,
    trim: true,
    maxlength: [1000, 'Description cannot be more than 1000 characters']
  },
  taskType: {
    type: String,
    enum: Object.values(TaskType),
    required: [true, 'Please specify task type'],
    default: TaskType.HOMEWORK
  },
  priority: {
    type: String,
    enum: ['low', 'medium', 'high', 'urgent'],
    default: 'medium'
  },
  status: {
    type: String,
    enum: ['pending', 'in_progress', 'completed', 'cancelled'],
    default: 'pending'
  },
  startDate: { type: Date },
  completedAt: { type: Date },
  estimatedDuration: {
    type: Number,
    min: [1, 'Duration must be at least 1 minute']
  },
  actualDuration: {
    type: Number,
    min: [1, 'Duration must be at least 1 minute']
  },
  tags: [{
    type: String,
    trim: true,
    maxlength: [50, 'Tag cannot be more than 50 characters']
  }],
  assignee: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  assignedBy: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  collaborators: [{
    type: Schema.Types.ObjectId,
    ref: 'User'
  }],
  location: {
    type: String,
    trim: true,
    maxlength: [200, 'Location cannot be more than 200 characters']
  },
  isRecurring: {
    type: Boolean,
    default: false
  },
  recurringPattern: {
    frequency: {
      type: String,
      enum: ['daily', 'weekly', 'monthly', 'yearly']
    },
    interval: {
      type: Number,
      min: [1, 'Interval must be at least 1']
    },
    daysOfWeek: [{
      type: Number,
      min: 0,
      max: 6
    }],
    dayOfMonth: {
      type: Number,
      min: 1,
      max: 31
    },
    endDate: {
      type: Date
    }
  },
  parentTask: {
    type: Schema.Types.ObjectId,
    ref: 'HomeworkTask'
  },
  subtasks: [{
    type: Schema.Types.ObjectId,
    ref: 'HomeworkTask'
  }],
  attachments: [{
    filename: {
      type: String,
      required: true
    },
    url: {
      type: String,
      required: true
    },
    uploadedAt: {
      type: Date,
      default: Date.now
    }
  }],
  notes: [{
    content: {
      type: String,
      required: true,
      maxlength: [500, 'Note cannot be more than 500 characters']
    },
    createdAt: {
      type: Date,
      default: Date.now
    },
    createdBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true
    }
  }],
  reminders: [{
    date: {
      type: Date,
      required: true
    },
    message: {
      type: String,
      maxlength: [200, 'Reminder message cannot be more than 200 characters']
    },
    isSent: {
      type: Boolean,
      default: false
    }
  }],
  xpValue: {
    type: Number,
    default: 10,
    min: [0, 'XP value cannot be negative']
  },
  autoGenerated: {
    type: Boolean,
    default: false
  },
  
  // Homework-specific fields
  subject: {
    type: String,
    required: [true, 'Please specify the subject'],
    trim: true,
    maxlength: [50, 'Subject cannot be more than 50 characters']
  },
  assignmentType: {
    type: String,
    enum: ['essay', 'problem_set', 'project', 'reading', 'quiz', 'exam', 'other'],
    required: [true, 'Please specify the assignment type'],
    default: 'other'
  },
  difficulty: {
    type: String,
    enum: ['easy', 'medium', 'hard'],
    default: 'medium'
  },
  estimatedStudyTime: {
    type: Number,
    min: [1, 'Study time must be at least 1 minute']
  },
  actualStudyTime: {
    type: Number,
    min: [1, 'Study time must be at least 1 minute']
  },
  grade: {
    type: String,
    trim: true,
    maxlength: [10, 'Grade cannot be more than 10 characters']
  },
  dueDate: {
    type: Date,
    required: [true, 'Due date is required for homework tasks']
  },
  materials: [{
    type: String,
    trim: true,
    maxlength: [100, 'Material name cannot be more than 100 characters']
  }],
  studyNotes: {
    type: String,
    trim: true,
    maxlength: [1000, 'Study notes cannot be more than 1000 characters']
  },
  isGroupWork: {
    type: Boolean,
    default: false
  },
  groupMembers: [{
    type: Schema.Types.ObjectId,
    ref: 'User'
  }]
}, {
  timestamps: true
});

// Set default taskType
HomeworkTaskSchema.add({ taskType: { type: String, default: TaskType.HOMEWORK } });

// Homework-specific indexes
HomeworkTaskSchema.index({ assignee: 1, subject: 1 });
HomeworkTaskSchema.index({ assignee: 1, dueDate: 1 });
HomeworkTaskSchema.index({ difficulty: 1 });
HomeworkTaskSchema.index({ assignmentType: 1 });

// Virtual for checking if assignment is overdue
HomeworkTaskSchema.virtual('isOverdue').get(function() {
  return this['dueDate'] && this['dueDate'] < new Date() && this['status'] !== 'completed';
});

// Virtual for calculating study efficiency
HomeworkTaskSchema.virtual('studyEfficiency').get(function() {
  if (!this['estimatedStudyTime'] || !this['actualStudyTime']) return null;
  return (this['estimatedStudyTime'] / this['actualStudyTime']) * 100;
});

// Method to add a material
HomeworkTaskSchema.methods['addMaterial'] = function(material: string) {
  if (!this['materials'].includes(material)) {
    this['materials'].push(material);
  }
  return this['save']();
};

// Method to add a group member
HomeworkTaskSchema.methods['addGroupMember'] = function(userId: string) {
  if (!this['groupMembers'].includes(userId)) {
    this['groupMembers'].push(userId);
  }
  return this['save']();
};

// Method to update study time
HomeworkTaskSchema.methods['updateStudyTime'] = function(actualTime: number) {
  this['actualStudyTime'] = actualTime;
  return this['save']();
};

const HomeworkTask = mongoose.model<IHomeworkTask>('HomeworkTask', HomeworkTaskSchema);
export default HomeworkTask;
