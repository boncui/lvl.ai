import mongoose, { Document, Schema } from 'mongoose';

// ---------- ENUMS ----------
export enum TaskType {
  FOOD = 'food',
  HOMEWORK = 'homework',
  EMAIL = 'email',
  MEETING = 'meeting',
  PROJECT = 'project',
  PERSONAL = 'personal',
  WORK = 'work',
  HEALTH = 'health',
  SOCIAL = 'social',
  OTHER = 'other',
}

export enum TaskPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  URGENT = 'urgent',
}

export enum TaskStatus {
  PENDING = 'pending',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled',
}

// ---------- BASE TASK INTERFACE ----------
export interface IBaseTask extends Document {
  // Core task fields
  title: string;
  description?: string;
  taskType: TaskType;
  priority: TaskPriority;
  status: TaskStatus;
  dueDate?: Date;
  startDate?: Date;
  completedAt?: Date;
  estimatedDuration?: number; // in minutes
  actualDuration?: number; // in minutes
  tags: string[];
  
  // User relationships
  assignee: mongoose.Types.ObjectId; // User who owns the task
  assignedBy?: mongoose.Types.ObjectId; // User who assigned the task (if different from assignee)
  collaborators: mongoose.Types.ObjectId[]; // Users who can help with the task
  
  // Task organization
  location?: string;
  isRecurring: boolean;
  recurringPattern?: {
    frequency: 'daily' | 'weekly' | 'monthly' | 'yearly';
    interval: number; // every X days/weeks/months/years
    daysOfWeek?: number[]; // 0-6 for Sunday-Saturday (for weekly)
    dayOfMonth?: number; // 1-31 (for monthly)
    endDate?: Date;
  };
  parentTask?: mongoose.Types.ObjectId; // For subtasks
  subtasks: mongoose.Types.ObjectId[]; // Array of subtask IDs
  
  // Task content
  attachments: {
    filename: string;
    url: string;
    uploadedAt: Date;
  }[];
  notes: {
    content: string;
    createdAt: Date;
    createdBy: mongoose.Types.ObjectId;
  }[];
  reminders: {
    date: Date;
    message: string;
    isSent: boolean;
  }[];
  
  // XP and gamification
  xpValue: number;
  autoGenerated?: boolean; // if AI created it
  
  createdAt: Date;
  updatedAt: Date;
}

// ---------- BASE TASK SCHEMA ----------
const BaseTaskSchema = new Schema({
  title: {
    type: String,
    required: [true, 'Please add a task title'],
    trim: true,
    maxlength: [200, 'Title cannot be more than 200 characters']
  },
  description: {
    type: String,
    trim: true,
    maxlength: [1000, 'Description cannot be more than 1000 characters']
  },
  taskType: {
    type: String,
    enum: Object.values(TaskType),
    required: [true, 'Please specify task type'],
    default: TaskType.OTHER
  },
  priority: {
    type: String,
    enum: Object.values(TaskPriority),
    default: TaskPriority.MEDIUM
  },
  status: {
    type: String,
    enum: Object.values(TaskStatus),
    default: TaskStatus.PENDING
  },
  dueDate: {
    type: Date
  },
  startDate: {
    type: Date
  },
  completedAt: {
    type: Date
  },
  estimatedDuration: {
    type: Number,
    min: [1, 'Duration must be at least 1 minute']
  },
  actualDuration: {
    type: Number,
    min: [1, 'Duration must be at least 1 minute']
  },
  tags: [{
    type: String,
    trim: true,
    maxlength: [50, 'Tag cannot be more than 50 characters']
  }],
  assignee: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  assignedBy: {
    type: Schema.Types.ObjectId,
    ref: 'User'
  },
  collaborators: [{
    type: Schema.Types.ObjectId,
    ref: 'User'
  }],
  location: {
    type: String,
    trim: true,
    maxlength: [200, 'Location cannot be more than 200 characters']
  },
  isRecurring: {
    type: Boolean,
    default: false
  },
  recurringPattern: {
    frequency: {
      type: String,
      enum: ['daily', 'weekly', 'monthly', 'yearly']
    },
    interval: {
      type: Number,
      min: [1, 'Interval must be at least 1']
    },
    daysOfWeek: [{
      type: Number,
      min: 0,
      max: 6
    }],
    dayOfMonth: {
      type: Number,
      min: 1,
      max: 31
    },
    endDate: {
      type: Date
    }
  },
  parentTask: {
    type: Schema.Types.ObjectId,
    ref: 'Task'
  },
  subtasks: [{
    type: Schema.Types.ObjectId,
    ref: 'Task'
  }],
  attachments: [{
    filename: {
      type: String,
      required: true
    },
    url: {
      type: String,
      required: true
    },
    uploadedAt: {
      type: Date,
      default: Date.now
    }
  }],
  notes: [{
    content: {
      type: String,
      required: true,
      maxlength: [500, 'Note cannot be more than 500 characters']
    },
    createdAt: {
      type: Date,
      default: Date.now
    },
    createdBy: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true
    }
  }],
  reminders: [{
    date: {
      type: Date,
      required: true
    },
    message: {
      type: String,
      maxlength: [200, 'Reminder message cannot be more than 200 characters']
    },
    isSent: {
      type: Boolean,
      default: false
    }
  }],
  xpValue: {
    type: Number,
    default: 10,
    min: [0, 'XP value cannot be negative']
  },
  autoGenerated: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Indexes for better query performance
BaseTaskSchema.index({ assignee: 1, status: 1 });
BaseTaskSchema.index({ dueDate: 1 });
BaseTaskSchema.index({ taskType: 1 });
BaseTaskSchema.index({ priority: 1 });
BaseTaskSchema.index({ tags: 1 });

// Virtual for checking if task is overdue
BaseTaskSchema.virtual('isOverdue').get(function() {
  return this.dueDate && this.dueDate < new Date() && this.status !== TaskStatus.COMPLETED;
});

// Pre-save middleware to set completedAt when status changes to completed
BaseTaskSchema.pre('save', function(next) {
  if (this.isModified('status') && this.status === TaskStatus.COMPLETED && !this.completedAt) {
    this.completedAt = new Date();
  }
  next();
});

// Method to add a note
BaseTaskSchema.methods['addNote'] = function(content: string, userId: string) {
  this['notes'].push({
    content,
    createdBy: userId
  });
  return this['save']();
};

// Method to add a reminder
BaseTaskSchema.methods['addReminder'] = function(date: Date, message?: string) {
  this['reminders'].push({
    date,
    message: message || `Reminder: ${this['title']}`,
    isSent: false
  });
  return this['save']();
};

// Method to add a collaborator
BaseTaskSchema.methods['addCollaborator'] = function(userId: string) {
  if (!this['collaborators'].includes(userId)) {
    this['collaborators'].push(userId);
  }
  return this['save']();
};

// Method to remove a collaborator
BaseTaskSchema.methods['removeCollaborator'] = function(userId: string) {
  this['collaborators'] = this['collaborators'].filter((id: any) => !id.equals(userId));
  return this['save']();
};

export { BaseTaskSchema };
export default BaseTaskSchema;
