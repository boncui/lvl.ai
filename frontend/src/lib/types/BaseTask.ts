// Frontend types based on backend BaseTask model

// ---------- ENUMS ----------
export enum TaskType {
  FOOD = 'food',
  HOMEWORK = 'homework',
  EMAIL = 'email',
  MEETING = 'meeting',
  PROJECT = 'project',
  PERSONAL = 'personal',
  WORK = 'work',
  HEALTH = 'health',
  SOCIAL = 'social',
  OTHER = 'other',
}

export enum TaskPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  URGENT = 'urgent',
}

export enum TaskStatus {
  PENDING = 'pending',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled',
}

// ---------- BASE TASK INTERFACE ----------
export interface IBaseTask {
  // Core task fields
  title: string;
  description?: string;
  taskType: TaskType;
  priority: TaskPriority;
  status: TaskStatus;
  dueDate?: Date;
  startDate?: Date;
  completedAt?: Date;
  estimatedDuration?: number; // in minutes
  actualDuration?: number; // in minutes
  tags: string[];
  
  // User relationships
  assignee: string; // User who owns the task
  assignedBy?: string; // User who assigned the task (if different from assignee)
  collaborators: string[]; // Users who can help with the task
  
  // Location and scheduling
  location?: string;
  isRecurring: boolean;
  recurringPattern?: IRecurringPattern;
  
  // Task hierarchy
  parentTask?: string;
  subtasks: string[];
  
  // Attachments and notes
  attachments: ITaskAttachment[];
  notes: ITaskNote[];
  reminders: ITaskReminder[];
  
  // Gamification
  xpValue: number;
  autoGenerated?: boolean;
  
  // Personal task specific fields
  personalCategory?: 'health' | 'fitness' | 'hobby' | 'learning' | 'travel' | 'family' | 'finance' | 'home' | 'other';
  isPrivate?: boolean;
  personalNotes?: string;
  moodBefore?: string;
  moodAfter?: string;
  energyLevel?: 1 | 2 | 3 | 4 | 5;
  weatherDependent?: boolean;
  weatherCondition?: string;
  seasonality?: string[];
  personalGoals?: string[];
  reflection?: string;
  photos?: string[];
  cost?: number;
  actualCost?: number;
  
  // Timestamps
  createdAt: Date;
  updatedAt: Date;
}

// ---------- SUPPORTING INTERFACES ----------
export interface IRecurringPattern {
  frequency: 'daily' | 'weekly' | 'monthly' | 'yearly';
  interval: number;
  daysOfWeek?: number[];
  dayOfMonth?: number;
  endDate?: Date;
}

export interface ITaskAttachment {
  filename: string;
  url: string;
  uploadedAt: Date;
}

export interface ITaskNote {
  content: string;
  createdAt: Date;
  createdBy: string;
}

export interface ITaskReminder {
  date: Date;
  message: string;
  isSent: boolean;
}

// ---------- FRONTEND-SPECIFIC TYPES ----------
// These are the types used in the frontend (without Mongoose Document)
export interface BaseTask {
  _id: string;
  title: string;
  description?: string;
  taskType: TaskType;
  priority: TaskPriority;
  status: TaskStatus;
  dueDate?: Date;
  startDate?: Date;
  completedAt?: Date;
  estimatedDuration?: number;
  actualDuration?: number;
  tags: string[];
  assignee: string;
  assignedBy?: string;
  collaborators: string[];
  location?: string;
  isRecurring: boolean;
  recurringPattern?: RecurringPattern;
  parentTask?: string;
  subtasks: string[];
  attachments: TaskAttachment[];
  notes: TaskNote[];
  reminders: TaskReminder[];
  xpValue: number;
  autoGenerated?: boolean;
  personalCategory?: 'health' | 'fitness' | 'hobby' | 'learning' | 'travel' | 'family' | 'finance' | 'home' | 'other';
  isPrivate?: boolean;
  personalNotes?: string;
  moodBefore?: string;
  moodAfter?: string;
  energyLevel?: 1 | 2 | 3 | 4 | 5;
  weatherDependent?: boolean;
  weatherCondition?: string;
  seasonality?: string[];
  personalGoals?: string[];
  reflection?: string;
  photos?: string[];
  cost?: number;
  actualCost?: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface RecurringPattern {
  frequency: 'daily' | 'weekly' | 'monthly' | 'yearly';
  interval: number;
  daysOfWeek?: number[];
  dayOfMonth?: number;
  endDate?: Date;
}

export interface TaskAttachment {
  filename: string;
  url: string;
  uploadedAt: Date;
}

export interface TaskNote {
  content: string;
  createdAt: Date;
  createdBy: string;
}

export interface TaskReminder {
  date: Date;
  message: string;
  isSent: boolean;
}
