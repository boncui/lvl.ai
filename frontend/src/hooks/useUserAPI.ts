import { useAuth } from '@/contexts/AuthContext';
import { UserAPI } from '@/lib/api/users';
import { UserProfileFormData } from '@/types';

// Hook for current user operations
export function useCurrentUserAPI() {
  const { user } = useAuth();

  if (!user) {
    throw new Error('User must be authenticated to use current user API');
  }

  const userId = user._id;

  return {
    // Profile operations
    getMyProfile: () => UserAPI.getMyProfile(),
    updateMyProfile: (profileData: UserProfileFormData) => 
      UserAPI.updateMyProfile(profileData),

    // Task operations
    getMyTasks: (params?: {
      category?: 'Fitness' | 'Productivity' | 'Nutrition' | 'Finance' | 'Social' | 'Knowledge';
      completed?: boolean;
      page?: number;
      limit?: number;
    }) => UserAPI.getUserTasks(userId, params),

    addTaskToMe: (taskData: {
      title: string;
      category: 'Fitness' | 'Productivity' | 'Nutrition' | 'Finance' | 'Social' | 'Knowledge';
      dueDate?: string;
      completed?: boolean;
      xpValue?: number;
      autoGenerated?: boolean;
    }) => UserAPI.addUserTask(userId, taskData),

    updateMyTask: (taskId: string, taskData: {
      title?: string;
      category?: 'Fitness' | 'Productivity' | 'Nutrition' | 'Finance' | 'Social' | 'Knowledge';
      dueDate?: string;
      completed?: boolean;
      xpValue?: number;
      autoGenerated?: boolean;
    }) => UserAPI.updateUserTask(userId, taskId, taskData),

    deleteMyTask: (taskId: string) => UserAPI.deleteUserTask(userId, taskId),

    // Metric operations
    getMyMetrics: (params?: {
      metricType?: 'workout' | 'meal' | 'finance' | 'study' | 'sleep';
      startDate?: string;
      endDate?: string;
      page?: number;
      limit?: number;
    }) => UserAPI.getUserMetrics(userId, params),

    addMetricToMe: (metricData: {
      metricType: 'workout' | 'meal' | 'finance' | 'study' | 'sleep';
      value: number;
      unit?: string;
      date?: string;
      notes?: string;
    }) => UserAPI.addUserMetric(userId, metricData),

    // Level operations
    getMyLevels: () => UserAPI.getUserLevels(userId),

    // Utility
    userId,
  };
}

// Hook for admin operations (requires admin role)
export function useAdminUserAPI() {
  const { user } = useAuth();

  if (!user) {
    throw new Error('User must be authenticated to use admin API');
  }

  // Note: In a real app, you'd check if user has admin role
  // For now, we'll assume the backend handles authorization

  return {
    // Admin user operations
    getUsers: (params?: {
      page?: number;
      limit?: number;
      sortBy?: 'createdAt' | 'updatedAt' | 'name' | 'email';
      sortOrder?: 'asc' | 'desc';
    }) => UserAPI.getUsers(params),

    getUser: (userId: string) => UserAPI.getUser(userId),

    createUser: (userData: {
      name: string;
      email: string;
      password: string;
      avatar?: string;
      preferences?: {
        timezone?: string;
        dailyGoalXP?: number;
        preferredWorkouts?: string[];
        dietaryPreferences?: string[];
        notificationSettings?: {
          email?: boolean;
          push?: boolean;
        };
      };
    }) => UserAPI.createUser(userData),

    updateUser: (userId: string, userData: {
      name?: string;
      email?: string;
      avatar?: string;
    }) => UserAPI.updateUser(userId, userData),

    deleteUser: (userId: string) => UserAPI.deleteUser(userId),

    // Admin can also manage any user's tasks and metrics
    getUserTasks: (userId: string, params?: {
      category?: 'Fitness' | 'Productivity' | 'Nutrition' | 'Finance' | 'Social' | 'Knowledge';
      completed?: boolean;
      page?: number;
      limit?: number;
    }) => UserAPI.getUserTasks(userId, params),

    getUserMetrics: (userId: string, params?: {
      metricType?: 'workout' | 'meal' | 'finance' | 'study' | 'sleep';
      startDate?: string;
      endDate?: string;
      page?: number;
      limit?: number;
    }) => UserAPI.getUserMetrics(userId, params),

    getUserLevels: (userId: string) => UserAPI.getUserLevels(userId),
  };
}

export default useCurrentUserAPI;
