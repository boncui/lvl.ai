// Frontend types based on backend models
export enum LifeCategory {
  FITNESS = "Fitness",
  PRODUCTIVITY = "Productivity",
  NUTRITION = "Nutrition",
  FINANCE = "Finance",
  SOCIAL = "Social",
  KNOWLEDGE = "Knowledge",
}

export enum TaskType {
  FOOD = 'food',
  HOMEWORK = 'homework',
  EMAIL = 'email',
  MEETING = 'meeting',
  PROJECT = 'project',
  PERSONAL = 'personal',
  WORK = 'work',
  HEALTH = 'health',
  SOCIAL = 'social',
  OTHER = 'other',
}

export enum TaskPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  URGENT = 'urgent',
}

export enum TaskStatus {
  PENDING = 'pending',
  IN_PROGRESS = 'in_progress',
  COMPLETED = 'completed',
  CANCELLED = 'cancelled',
}

// User Types
export interface LevelProgress {
  level: number;
  xp: number;
  dailyStreak: number;
  totalCompleted: number;
}

export interface Metric {
  metricType: "workout" | "meal" | "finance" | "study" | "sleep";
  value: number;
  unit?: string;
  date: Date;
  notes?: string;
}

export interface Integration {
  provider: string;
  connected: boolean;
  lastSync?: Date;
  tokens?: Record<string, string>;
}

export interface UserPreferences {
  timezone: string;
  dailyGoalXP: number;
  preferredWorkouts?: string[];
  dietaryPreferences?: string[];
  notificationSettings?: {
    email: boolean;
    push: boolean;
  };
}

export interface UserTasks {
  foodTasks: string[];
  homeworkTasks: string[];
  emailTasks: string[];
  meetingTasks: string[];
  projectTasks: string[];
  personalTasks: string[];
  workTasks: string[];
  healthTasks: string[];
  socialTasks: string[];
  otherTasks: string[];
}

export interface CalendarEvent {
  title: string;
  start: Date;
  end: Date;
  description?: string;
  source?: string;
}

export interface UserFinances {
  income: number;
  expenses: number;
  savings: number;
  goals?: string[];
}

export interface AgentMemory {
  lastConversation?: string;
  suggestions?: string[];
  autoActions?: string[];
}

export interface FriendRequests {
  sent: string[];
  received: string[];
}

export interface User {
  _id: string;
  name: string;
  email: string;
  avatar?: string;
  preferences: UserPreferences;
  levels: Record<LifeCategory, LevelProgress>;
  tasks: UserTasks;
  metrics: Metric[];
  integrations: Integration[];
  calendarEvents?: CalendarEvent[];
  finances?: UserFinances;
  agentMemory?: AgentMemory;
  isEmailVerified: boolean;
  friends: string[];
  friendRequests: FriendRequests;
  blockedUsers: string[];
  createdAt: Date;
  updatedAt: Date;
}

// Task Types
export interface RecurringPattern {
  frequency: 'daily' | 'weekly' | 'monthly' | 'yearly';
  interval: number;
  daysOfWeek?: number[];
  dayOfMonth?: number;
  endDate?: Date;
}

export interface TaskAttachment {
  filename: string;
  url: string;
  uploadedAt: Date;
}

export interface TaskNote {
  content: string;
  createdAt: Date;
  createdBy: string;
}

export interface TaskReminder {
  date: Date;
  message: string;
  isSent: boolean;
}

export interface BaseTask {
  _id: string;
  title: string;
  description?: string;
  taskType: TaskType;
  priority: TaskPriority;
  status: TaskStatus;
  dueDate?: Date;
  startDate?: Date;
  completedAt?: Date;
  estimatedDuration?: number;
  actualDuration?: number;
  tags: string[];
  assignee: string;
  assignedBy?: string;
  collaborators: string[];
  location?: string;
  isRecurring: boolean;
  recurringPattern?: RecurringPattern;
  parentTask?: string;
  subtasks: string[];
  attachments: TaskAttachment[];
  notes: TaskNote[];
  reminders: TaskReminder[];
  xpValue: number;
  autoGenerated?: boolean;
  personalCategory?: 'health' | 'fitness' | 'hobby' | 'learning' | 'travel' | 'family' | 'finance' | 'home' | 'other';
  isPrivate?: boolean;
  personalNotes?: string;
  moodBefore?: string;
  moodAfter?: string;
  energyLevel?: 1 | 2 | 3 | 4 | 5;
  weatherDependent?: boolean;
  weatherCondition?: string;
  seasonality?: string[];
  personalGoals?: string[];
  reflection?: string;
  photos?: string[];
  cost?: number;
  actualCost?: number;
  createdAt: Date;
  updatedAt: Date;
}

// API Response Types
export interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

export interface PaginatedResponse<T> extends ApiResponse<T[]> {
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

// Auth Types
export interface LoginRequest {
  email: string;
  password: string;
}

export interface RegisterRequest {
  name: string;
  email: string;
  password: string;
}

export interface AuthResponse {
  user: User;
  token: string;
}

// Form Types
export interface TaskFormData {
  title: string;
  description?: string;
  taskType: TaskType;
  priority: TaskPriority;
  dueDate?: Date;
  startDate?: Date;
  estimatedDuration?: number;
  tags: string[];
  location?: string;
  isRecurring: boolean;
  recurringPattern?: RecurringPattern;
  personalCategory?: string;
  isPrivate?: boolean;
  personalNotes?: string;
  energyLevel?: number;
  weatherDependent?: boolean;
  weatherCondition?: string;
  seasonality?: string[];
  personalGoals?: string[];
  cost?: number;
}

export interface LoginFormData {
  email: string;
  password: string;
}

export interface RegisterFormData {
  name: string;
  email: string;
  password: string;
}

export interface UserProfileFormData {
  name: string;
  email: string;
  preferences: UserPreferences;
}

// UI Component Types
export interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
}

export interface TabItem {
  id: string;
  label: string;
  content: React.ReactNode;
  disabled?: boolean;
}

export interface ToastMessage {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info';
  title: string;
  description?: string;
  duration?: number;
}

// Chart and Analytics Types
export interface ChartDataPoint {
  x: string | number;
  y: number;
  label?: string;
}

export interface AnalyticsData {
  totalTasks: number;
  completedTasks: number;
  overdueTasks: number;
  totalXP: number;
  streak: number;
  categoryBreakdown: Record<LifeCategory, number>;
  weeklyProgress: ChartDataPoint[];
  monthlyProgress: ChartDataPoint[];
}

// Notification Types
export interface Notification {
  id: string;
  type: 'task_reminder' | 'friend_request' | 'achievement' | 'system';
  title: string;
  message: string;
  read: boolean;
  createdAt: Date;
  actionUrl?: string;
}

// Search and Filter Types
export interface TaskFilters {
  status?: TaskStatus[];
  priority?: TaskPriority[];
  taskType?: TaskType[];
  tags?: string[];
  assignee?: string[];
  dateRange?: {
    start: Date;
    end: Date;
  };
  search?: string;
}

export interface SortOption {
  field: string;
  direction: 'asc' | 'desc';
}

// Theme Types
export interface ThemeConfig {
  mode: 'light' | 'dark' | 'system';
  primaryColor: string;
  accentColor: string;
}

// Error Types
export interface AppError {
  code: string;
  message: string;
  details?: unknown;
}
